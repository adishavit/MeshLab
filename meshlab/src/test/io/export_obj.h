/****************************************************************************
* VCGLib                                                            o o     *
* Visual and Computer Graphics Library                            o     o   *
*                                                                _   O  _   *
* Copyright(C) 2004                                                \/)\/    *
* Visual Computing Lab                                            /\/|      *
* ISTI - Italian National Research Council                           |      *
*                                                                    \      *
* All rights reserved.                                                      *
*                                                                           *
* This program is free software; you can redistribute it and/or modify      *   
* it under the terms of the GNU General Public License as published by      *
* the Free Software Foundation; either version 2 of the License, or         *
* (at your option) any later version.                                       *
*                                                                           *
* This program is distributed in the hope that it will be useful,           *
* but WITHOUT ANY WARRANTY; without even the implied warranty of            *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
* GNU General Public License (http://www.gnu.org/licenses/gpl.txt)          *
* for more details.                                                         *
*                                                                           *
****************************************************************************/

/****************************************************************************
  History

****************************************************************************/

#ifndef __VCGLIB_EXPORT_OBJ
#define __VCGLIB_EXPORT_OBJ

#include <iostream>
#include <fstream>

namespace vcg 
{
	namespace tri 
	{
		namespace io 
		{
			template <class SaveMeshType>
			class ExporterOBJ
			{
			public:	
				typedef typename SaveMeshType::FaceIterator FaceIterator;
				typedef typename SaveMeshType::VertexIterator VertexIterator;
				
				static bool Save(SaveMeshType &m, const char * filename , bool binary =true, const char *objectname=0)	
				{
					if(m.vert.size() == 0)return false;
					if(m.face.size() == 0)return false;

					if(binary)
					{
						return false;
					}
					else
					{
						std::ofstream stream(filename);

						if (stream.fail())
							return false; 

						stream << "#GENERATED BY EXPORT_OBJ" << std::endl;

						//vertici
						stream << std::endl << "#VERTEXS" << std::endl;
						VertexIterator vi;
						for(vi=m.vert.begin(); vi!=m.vert.end(); ++vi)
							stream << "v " << (*vi).P()[0] << " " << (*vi).P()[1] << " " << (*vi).P()[2] << std::endl;
						
						//facce
						stream << std::endl << "#FACES" << std::endl;
						FaceIterator fi;
						for(fi=m.face.begin(); fi!=m.face.end(); ++fi) if( !(*fi).IsD() )
						{
							stream << "f "; 					
							int MAX = 3;
							for(unsigned int k=0;k<MAX;k++)
							{
									stream << GetIndexVertex(m,(*fi).V(k)->P());
									if(k!=MAX-1)stream << " ";
							}
							stream <<	std::endl;
						}

						stream.close();
						return true;
					}
				}
				/*
					restituisce l'indece del vertice, aggiunto di una unita'.
				*/
				static int GetIndexVertex(SaveMeshType &m,Point3f p)
				{
					static const unsigned int ADDTORETURN = 1;
					for(unsigned int i=0;i<m.vert.size();i++)
					{
						if(m.vert[i].P() == p){return i+ADDTORETURN;}
					}
					std::cout << "" << std::endl;
					return -1;
				}

			}; // end class
		} // end Namespace tri
	} // end Namespace io
} // end Namespace vcg

#endif
