
#line 3 "lex.js_lex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer js_lex_create_buffer
#define yy_delete_buffer js_lex_delete_buffer
#define yy_flex_debug js_lex_flex_debug
#define yy_init_buffer js_lex_init_buffer
#define yy_flush_buffer js_lex_flush_buffer
#define yy_load_buffer_state js_lex_load_buffer_state
#define yy_switch_to_buffer js_lex_switch_to_buffer
#define yyin js_lexin
#define yyleng js_lexleng
#define yylex js_lexlex
#define yylineno js_lexlineno
#define yyout js_lexout
#define yyrestart js_lexrestart
#define yytext js_lextext
#define yywrap js_lexwrap
#define yyalloc js_lexalloc
#define yyrealloc js_lexrealloc
#define yyfree js_lexfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE js_lexrestart(js_lexin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int js_lexleng;

extern FILE *js_lexin, *js_lexout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up js_lextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up js_lextext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via js_lexrestart()), so that the user can continue scanning by
	 * just pointing js_lexin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when js_lextext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int js_lexleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow js_lexwrap()'s to do buffer switches
 * instead of setting up a fresh js_lexin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void js_lexrestart (FILE *input_file  );
void js_lex_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE js_lex_create_buffer (FILE *file,int size  );
void js_lex_delete_buffer (YY_BUFFER_STATE b  );
void js_lex_flush_buffer (YY_BUFFER_STATE b  );
void js_lexpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void js_lexpop_buffer_state (void );

static void js_lexensure_buffer_stack (void );
static void js_lex_load_buffer_state (void );
static void js_lex_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER js_lex_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE js_lex_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE js_lex_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE js_lex_scan_bytes (yyconst char *bytes,int len  );

void *js_lexalloc (yy_size_t  );
void *js_lexrealloc (void *,yy_size_t  );
void js_lexfree (void *  );

#define yy_new_buffer js_lex_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        js_lexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            js_lex_create_buffer(js_lexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        js_lexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            js_lex_create_buffer(js_lexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define js_lexwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *js_lexin = (FILE *) 0, *js_lexout = (FILE *) 0;

typedef int yy_state_type;

extern int js_lexlineno;

int js_lexlineno = 1;

extern char *js_lextext;
#define yytext_ptr js_lextext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up js_lextext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	js_lexleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[226] =
    {   0,
        0,    0,   95,   94,   93,   44,   55,    3,   37,   57,
       60,   50,    8,   40,   15,   13,   80,   80,    7,   58,
       36,   19,   27,   51,   92,   32,   53,   73,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       31,   47,   52,   65,   43,   54,    1,    2,   59,   49,
       48,   38,   39,   88,    0,   61,   12,    0,   88,   80,
        0,    0,   84,   81,    0,   84,   80,   34,   35,   18,
       25,   26,   92,   92,   72,   92,   92,   92,   92,   14,
       92,   92,   92,   92,   92,   28,   29,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   45,   46,

       42,    0,   88,    0,   89,   86,   83,   82,   82,    0,
       80,   33,   17,   24,    0,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   21,   92,   92,   41,   92,
       92,   92,   92,   92,   92,   92,   66,   92,   68,   92,
       92,   92,    0,   88,   89,   87,   85,    0,    0,    0,
       23,   92,    5,   92,   92,   92,   92,   92,   92,   16,
       92,   92,   92,   92,   74,   92,   92,   92,   63,   92,
       75,   92,   69,   92,   71,    0,    0,   91,    4,    6,
       77,   92,   92,   92,   92,   76,   92,   92,   92,   92,
       92,   92,   64,   92,   70,    0,   90,   91,   92,   92,

       92,   11,   92,   92,   92,   92,   56,   62,   67,   90,
       92,   92,   10,   20,   92,   92,   92,    9,   78,   22,
       92,   79,   92,   30,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,   20,   21,
       22,   23,   24,    1,   25,   25,   25,   25,   26,   27,
       28,   28,   28,   28,   28,   29,   28,   28,   28,   30,
       28,   28,   28,   28,   31,   28,   28,   32,   28,   28,
       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   28,   47,   48,   28,   49,
       50,   51,   28,   52,   53,   54,   55,   56,   57,   32,
       58,   28,   59,   60,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    4,    4,    4,    1,    1,
        1,    1,    1,    1,    4,    4,    4,    5,    5,    5,
        5,    5,    1,    1,    1,    1,    5,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[231] =
    {   0,
        0,    0,  206,  871,  871,  181,  180,   56,  871,  871,
      175,   53,  871,   52,   50,   54,   75,   54,  871,  871,
       58,  164,   59,  871,   67,  871,  871,  139,   79,   82,
       92,   95,   98,  108,  121,  129,  111,  138,  112,  114,
      871,   80,  871,  871,  127,  871,  871,  871,  871,  871,
      871,  871,  871,  162,   88,  150,  151,  116,  182,  109,
      200,  216,  146,  144,  121,  139,    0,  111,  871,   83,
      871,  159,    0,  203,  871,  219,  222,  228,  231,  234,
      237,  240,  246,  249,  255,  264,  267,  275,  280,  289,
      292,  295,  298,  301,  305,  308,  313,  317,  871,  871,

      871,  333,  871,  344,  347,   63,  871,   61,   39,    0,
      352,  871,  871,  871,   55,  351,  362,  368,  375,  380,
      393,  396,  399,  402,  405,  408,  416,  428,  431,  435,
      442,  445,  448,  451,  455,  459,  462,  469,  472,  475,
      478,  490,  481,  496,  871,  871,  871,  142,  144,  504,
      871,  511,  514,  520,  524,  529,  532,  535,  538,  543,
      546,  550,  553,  556,  563,  566,  569,  579,  583,  586,
      592,  595,  598,  606,  609,  617,  620,  623,  637,  640,
      643,  646,  652,  656,  659,  662,  665,  668,  671,  674,
      682,  689,  692,  699,  705,  708,  711,  871,  719,  727,

      730,  733,  739,  744,  747,  750,  754,  759,  762,  871,
      765,  772,  782,  785,  788,  792,  795,  798,  801,  804,
      809,  812,  815,  822,  871,  859,  861,  864,  865,   69
    } ;

static yyconst flex_int16_t yy_def[231] =
    {   0,
      225,    1,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  226,  225,   17,  225,  225,
      225,  225,  225,  225,  227,  225,  225,  225,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,   33,   33,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  226,  226,  226,  226,  225,   17,
      225,  225,  225,  225,  228,  225,   18,  225,  225,  225,
      225,  225,  229,  227,  225,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  230,
      228,  225,  225,  225,  225,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  225,  225,  225,  225,  225,  230,  230,  225,
      225,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  225,  225,  225,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  225,  225,  225,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  225,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,    0,  225,  225,  225,  225,  225
    } ;

static yyconst flex_int16_t yy_nxt[934] =
    {   0,
        4,    5,    5,    6,    4,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   18,   19,   20,
       21,   22,   23,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   26,    4,   27,   28,   25,   25,   29,   30,
       31,   32,   33,   25,   25,   34,   25,   25,   35,   25,
       25,   36,   37,   38,   25,   39,   40,   25,   41,   42,
       43,   44,   47,   50,   52,   54,   54,   54,   56,   67,
       67,   67,  148,   53,   51,   57,  151,   48,   68,   69,
       71,   72,   73,   73,   73,  225,  147,   58,   59,  147,
       60,   60,   61,  146,   73,   73,   73,   73,   73,   73,

       62,   99,   56,   63,  113,   64,   65,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   62,  146,  225,   77,
       55,   58,   66,   73,   73,   73,   73,   73,   73,   64,
       76,   78,  112,   79,  110,   82,   73,   73,   73,  100,
      225,   80,   81,   83,   73,   73,   73,   84,  101,   95,
       86,   74,   85,   73,   73,   73,   87,   74,   97,   98,
       75,   96,   88,   74,   56,   56,   74,   91,   74,  107,
       90,  176,  108,  176,  106,   89,  107,   54,   54,   54,
      114,  115,   92,   58,   58,   70,  106,  102,  103,   93,
      103,  109,  176,  107,  176,   94,   49,   54,   54,   54,

      107,   46,   45,  102,  103,  225,  225,  102,  103,  103,
      103,  225,  225,   59,  225,   61,   61,   61,   73,   73,
       73,  225,  225,  102,  103,   62,  104,  225,  104,  103,
      225,  105,  105,  105,   73,   73,   73,   73,   73,   73,
      225,   62,  225,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,  225,  225,
      116,   73,   73,   73,   73,   73,   73,  225,  225,  120,
       73,   73,   73,  121,  117,  118,  119,  225,  122,   73,
       73,   73,   73,   73,   73,  225,  225,  124,  225,  123,
       73,   73,   73,  225,  125,   73,   73,   73,  225,  225,

      126,  225,  225,  127,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,  128,
       73,   73,   73,   73,   73,   73,  225,  130,   73,   73,
       73,  129,   73,   73,   73,  225,  225,  133,  225,  225,
      134,  131,  132,  143,  225,  143,  135,  225,  144,  144,
      144,  138,  136,  140,  225,  137,  139,  225,  141,  105,
      105,  105,  105,  105,  105,  149,   73,   73,   73,  225,
      142,  225,  225,  145,  225,  145,  225,   73,   73,   73,
       63,  150,   64,   73,   73,   73,  225,  225,  152,  145,
       73,   73,   73,  225,  145,   73,   73,   73,  225,   66,

      225,  225,  150,  153,  225,  225,   64,  154,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,  225,  155,  156,  225,
      158,   73,   73,   73,  157,  225,  225,  159,  225,  225,
      160,  225,  162,   73,   73,   73,   73,   73,   73,  225,
       73,   73,   73,  225,  161,  163,  225,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,  225,
       73,   73,   73,  225,   73,   73,   73,   73,   73,   73,
      225,  164,  165,  166,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,  144,  144,  144,  167,

      171,  168,  225,  169,  170,   73,   73,   73,  225,  225,
      172,  144,  144,  144,  177,  173,  177,  225,  225,  178,
      178,  178,  103,  225,  103,  174,   73,   73,   73,   73,
       73,   73,  225,  225,  175,   73,   73,   73,  103,   73,
       73,   73,  225,  103,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,  225,  179,   73,   73,
       73,   73,   73,   73,  180,   73,   73,   73,   73,   73,
       73,   73,   73,   73,  182,  183,  225,  181,   73,   73,
       73,   73,   73,   73,   73,   73,   73,  186,  225,  184,
      225,  185,  225,  189,   73,   73,   73,  187,   73,   73,

       73,   73,   73,   73,  225,  225,  188,   73,   73,   73,
       73,   73,   73,   73,   73,   73,  225,  190,  192,  225,
      191,   73,   73,   73,   73,   73,   73,  196,  225,  196,
      225,  225,  197,  197,  197,  178,  178,  178,  178,  178,
      178,  225,  193,  225,  194,  225,  225,  195,  225,  198,
      225,  198,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,  225,  198,  225,   73,   73,   73,
      198,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,  225,  225,  199,  200,  225,   73,   73,   73,

      202,  225,  225,  201,   73,   73,   73,   73,   73,   73,
      225,  225,  203,  204,   73,   73,   73,  225,  225,  205,
       73,   73,   73,  197,  197,  197,  197,  197,  197,  206,
      207,  225,  225,  208,   73,   73,   73,  210,  225,  210,
      225,  209,   73,   73,   73,   73,   73,   73,   73,   73,
       73,  225,  225,  210,   73,   73,   73,  225,  210,   73,
       73,   73,   73,   73,   73,   73,   73,   73,  212,   73,
       73,   73,  225,  211,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  213,  225,  225,  216,   73,   73,   73,
      225,  217,  225,  215,  225,  225,  214,   73,   73,   73,

       73,   73,   73,   73,   73,   73,  218,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,  225,  219,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  221,  225,  222,  220,   73,   73,   73,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  224,  223,   55,
      225,   55,   55,   55,   74,   74,  111,  111,   73,   73,
        3,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225
    } ;

static yyconst flex_int16_t yy_chk[934] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    8,   12,   14,   15,   15,   15,   16,   18,
       18,   18,  230,   14,   12,   16,  115,    8,   21,   21,
       23,   23,   25,   25,   25,   18,  109,   16,   17,  108,
       17,   17,   17,  106,   29,   29,   29,   30,   30,   30,

       17,   42,   55,   17,   70,   17,   17,   31,   31,   31,
       32,   32,   32,   33,   33,   33,   17,  106,   58,   30,
       58,   55,   17,   34,   34,   34,   37,   37,   37,   17,
       29,   30,   68,   31,   65,   33,   35,   35,   35,   42,
       60,   31,   32,   33,   36,   36,   36,   33,   45,   39,
       34,   40,   33,   38,   38,   38,   34,   39,   40,   40,
       28,   39,   35,   40,   56,   57,   39,   37,   40,   66,
       36,  148,   64,  149,   63,   35,   63,   54,   54,   54,
       72,   72,   38,   56,   57,   22,   66,   54,   54,   38,
       54,   64,  148,   66,  149,   38,   11,   59,   59,   59,

       63,    7,    6,   54,   54,    3,    0,   59,   59,   54,
       59,    0,    0,   61,    0,   61,   61,   61,   74,   74,
       74,    0,    0,   59,   59,   61,   62,    0,   62,   59,
        0,   62,   62,   62,   76,   76,   76,   77,   77,   77,
        0,   61,    0,   78,   78,   78,   79,   79,   79,   80,
       80,   80,   81,   81,   81,   82,   82,   82,    0,    0,
       76,   83,   83,   83,   84,   84,   84,    0,    0,   79,
       85,   85,   85,   79,   77,   77,   78,    0,   79,   86,
       86,   86,   87,   87,   87,    0,    0,   82,    0,   81,
       88,   88,   88,    0,   83,   89,   89,   89,    0,    0,

       84,    0,    0,   85,   90,   90,   90,   91,   91,   91,
       92,   92,   92,   93,   93,   93,   94,   94,   94,   87,
       95,   95,   95,   96,   96,   96,    0,   89,   97,   97,
       97,   88,   98,   98,   98,    0,    0,   91,    0,    0,
       92,   90,   90,  102,    0,  102,   92,    0,  102,  102,
      102,   94,   93,   96,    0,   93,   95,    0,   97,  104,
      104,  104,  105,  105,  105,  111,  116,  116,  116,    0,
       98,    0,    0,  105,    0,  105,    0,  117,  117,  117,
      111,  111,  111,  118,  118,  118,    0,    0,  116,  105,
      119,  119,  119,    0,  105,  120,  120,  120,    0,  111,

        0,    0,  111,  117,    0,    0,  111,  118,  121,  121,
      121,  122,  122,  122,  123,  123,  123,  124,  124,  124,
      125,  125,  125,  126,  126,  126,    0,  119,  119,    0,
      121,  127,  127,  127,  120,    0,    0,  122,    0,    0,
      123,    0,  125,  128,  128,  128,  129,  129,  129,    0,
      130,  130,  130,    0,  124,  127,    0,  131,  131,  131,
      132,  132,  132,  133,  133,  133,  134,  134,  134,    0,
      135,  135,  135,    0,  136,  136,  136,  137,  137,  137,
        0,  128,  130,  131,  138,  138,  138,  139,  139,  139,
      140,  140,  140,  141,  141,  141,  143,  143,  143,  132,

      136,  133,    0,  134,  135,  142,  142,  142,    0,    0,
      138,  144,  144,  144,  150,  140,  150,    0,    0,  150,
      150,  150,  144,    0,  144,  141,  152,  152,  152,  153,
      153,  153,    0,    0,  142,  154,  154,  154,  144,  155,
      155,  155,    0,  144,  156,  156,  156,  157,  157,  157,
      158,  158,  158,  159,  159,  159,    0,  152,  160,  160,
      160,  161,  161,  161,  154,  162,  162,  162,  163,  163,
      163,  164,  164,  164,  156,  157,    0,  155,  165,  165,
      165,  166,  166,  166,  167,  167,  167,  161,    0,  158,
        0,  159,    0,  164,  168,  168,  168,  162,  169,  169,

      169,  170,  170,  170,    0,    0,  163,  171,  171,  171,
      172,  172,  172,  173,  173,  173,    0,  166,  168,    0,
      167,  174,  174,  174,  175,  175,  175,  176,    0,  176,
        0,    0,  176,  176,  176,  177,  177,  177,  178,  178,
      178,    0,  170,    0,  172,    0,    0,  174,    0,  178,
        0,  178,  179,  179,  179,  180,  180,  180,  181,  181,
      181,  182,  182,  182,    0,  178,    0,  183,  183,  183,
      178,  184,  184,  184,  185,  185,  185,  186,  186,  186,
      187,  187,  187,  188,  188,  188,  189,  189,  189,  190,
      190,  190,    0,    0,  182,  183,    0,  191,  191,  191,

      185,    0,    0,  184,  192,  192,  192,  193,  193,  193,
        0,    0,  187,  188,  194,  194,  194,    0,    0,  189,
      195,  195,  195,  196,  196,  196,  197,  197,  197,  190,
      191,    0,    0,  192,  199,  199,  199,  197,    0,  197,
        0,  194,  200,  200,  200,  201,  201,  201,  202,  202,
      202,    0,    0,  197,  203,  203,  203,    0,  197,  204,
      204,  204,  205,  205,  205,  206,  206,  206,  200,  207,
      207,  207,    0,  199,  208,  208,  208,  209,  209,  209,
      211,  211,  211,  201,    0,    0,  205,  212,  212,  212,
        0,  206,    0,  204,    0,    0,  203,  213,  213,  213,

      214,  214,  214,  215,  215,  215,  211,  216,  216,  216,
      217,  217,  217,  218,  218,  218,  219,  219,  219,  220,
      220,  220,    0,  212,  221,  221,  221,  222,  222,  222,
      223,  223,  223,  216,    0,  217,  215,  224,  224,  224,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  223,  221,  226,
        0,  226,  226,  226,  227,  227,  228,  228,  229,  229,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int js_lex_flex_debug;
int js_lex_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *js_lextext;
#line 1 "js_lex.l"
#define YY_NO_UNISTD_H 1
#line 5 "js_lex.l"
#include "js_parser.h"
#include <cstdlib>
#include <io.h>

#define YY_DECL int JSParser::nextToken()
#line 760 "lex.js_lex.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int js_lexlex_destroy (void );

int js_lexget_debug (void );

void js_lexset_debug (int debug_flag  );

YY_EXTRA_TYPE js_lexget_extra (void );

void js_lexset_extra (YY_EXTRA_TYPE user_defined  );

FILE *js_lexget_in (void );

void js_lexset_in  (FILE * in_str  );

FILE *js_lexget_out (void );

void js_lexset_out  (FILE * out_str  );

int js_lexget_leng (void );

char *js_lexget_text (void );

int js_lexget_lineno (void );

void js_lexset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int js_lexwrap (void );
#else
extern int js_lexwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( js_lextext, js_lexleng, 1, js_lexout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( js_lexin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( js_lexin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, js_lexin))==0 && ferror(js_lexin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(js_lexin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int js_lexlex (void);

#define YY_DECL int js_lexlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after js_lextext and js_lexleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "js_lex.l"


#line 945 "lex.js_lex.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! js_lexin )
			js_lexin = stdin;

		if ( ! js_lexout )
			js_lexout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			js_lexensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				js_lex_create_buffer(js_lexin,YY_BUF_SIZE );
		}

		js_lex_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of js_lextext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 226 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 871 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "js_lex.l"
{return T_AND_AND;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 "js_lex.l"
{return T_AND_EQ;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 "js_lex.l"
{return T_AND;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 "js_lex.l"
{return T_BREAK;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 "js_lex.l"
{return T_CASE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 "js_lex.l"
{return T_CATCH;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 "js_lex.l"
{return T_COLON;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 "js_lex.l"
{return T_COMMA;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 "js_lex.l"
{return T_CONTINUE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 37 "js_lex.l"
{return T_DEFAULT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 38 "js_lex.l"
{return T_DELETE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 39 "js_lex.l"
{return T_DIVIDE_EQ;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 40 "js_lex.l"
{return T_DIVIDE_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 41 "js_lex.l"
{return T_DO;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 42 "js_lex.l"
{return T_DOT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 43 "js_lex.l"
{return T_ELSE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 44 "js_lex.l"
{return T_EQ_EQ_EQ;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 45 "js_lex.l"
{return T_EQ_EQ;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 46 "js_lex.l"
{return T_EQ;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 47 "js_lex.l"
{return T_FINALLY;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 48 "js_lex.l"
{return T_FOR;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 49 "js_lex.l"
{return T_FUNCTION;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 50 "js_lex.l"
{return T_GT_GT_GT_EQ;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 51 "js_lex.l"
{return T_GT_GT_EQ;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 52 "js_lex.l"
{return T_GE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 53 "js_lex.l"
{return T_GT_GT;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 54 "js_lex.l"
{return T_GT;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 55 "js_lex.l"
{return T_IF;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 56 "js_lex.l"
{return T_IN;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 57 "js_lex.l"
{return T_INSTANCEOF;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 58 "js_lex.l"
{return T_LBRACE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 59 "js_lex.l"
{return T_LBRACKET;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 60 "js_lex.l"
{return T_LT_LT_EQ;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 61 "js_lex.l"
{return T_LT_LT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 62 "js_lex.l"
{return T_LE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 63 "js_lex.l"
{return T_LT;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 64 "js_lex.l"
{return T_LPAREN;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 65 "js_lex.l"
{return T_MINUS_MINUS;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 66 "js_lex.l"
{return T_MINUS_EQ;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 67 "js_lex.l"
{return T_MINUS;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 68 "js_lex.l"
{return T_NEW;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 69 "js_lex.l"
{return T_NOT_EQ_EQ;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 70 "js_lex.l"
{return T_NOT_EQ;} 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 71 "js_lex.l"
{return T_NOT;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 72 "js_lex.l"
{return T_OR_EQ;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 73 "js_lex.l"
{return T_OR_OR;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 74 "js_lex.l"
{return T_OR;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 75 "js_lex.l"
{return T_PLUS_EQ;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 76 "js_lex.l"
{return T_PLUS_PLUS;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 77 "js_lex.l"
{return T_PLUS;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 78 "js_lex.l"
{return T_QUESTION;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 79 "js_lex.l"
{return T_RBRACE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 80 "js_lex.l"
{return T_RBRACKET;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 81 "js_lex.l"
{return T_REMAINDER_EQ;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 82 "js_lex.l"
{return T_REMAINDER;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 83 "js_lex.l"
{return T_RETURN;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 84 "js_lex.l"
{return T_RPAREN;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 85 "js_lex.l"
{return T_SEMICOLON;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 86 "js_lex.l"
{return T_STAR_EQ;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 87 "js_lex.l"
{return T_STAR;}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 88 "js_lex.l"
{return T_STRING_LITERAL;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 89 "js_lex.l"
{return T_SWITCH;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 90 "js_lex.l"
{return T_THIS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 91 "js_lex.l"
{return T_THROW;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 92 "js_lex.l"
{return T_TILDE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 93 "js_lex.l"
{return T_TRY;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 94 "js_lex.l"
{return T_TYPEOF;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 95 "js_lex.l"
{return T_VAR;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 96 "js_lex.l"
{return T_VOID;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 97 "js_lex.l"
{return T_WHILE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 98 "js_lex.l"
{return T_WITH;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 99 "js_lex.l"
{return T_XOR_EQ;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 100 "js_lex.l"
{return T_XOR;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 101 "js_lex.l"
{return T_NULL;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 102 "js_lex.l"
{return T_TRUE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 103 "js_lex.l"
{return T_FALSE;}	
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 104 "js_lex.l"
{return T_CONST;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 105 "js_lex.l"
{return T_DEBUGGER;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 106 "js_lex.l"
{return T_RESERVED_WORD;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 107 "js_lex.l"
{yyval.i = QString(js_lextext).toInt();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 108 "js_lex.l"
{yyval.u = QString(js_lextext).toUInt();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 109 "js_lex.l"
{yyval.ul = QString(js_lextext).toULong();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 110 "js_lex.l"
{yyval.ul = QString(js_lextext).toULong();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 111 "js_lex.l"
{yyval.l = QString(js_lextext).toLong();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 112 "js_lex.l"
{yyval.l = QString(js_lextext).toULongLong();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 113 "js_lex.l"
{yyval.l = QString(js_lextext).toLongLong();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 114 "js_lex.l"
{yyval.l = QString(js_lextext).toULongLong();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 115 "js_lex.l"
{yyval.f = QString(js_lextext).toFloat();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 116 "js_lex.l"
{yyval.f = QString(js_lextext).toFloat();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 117 "js_lex.l"
{yyval.f = QString(js_lextext).toFloat();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 118 "js_lex.l"
{yyval.f = QString(js_lextext).toFloat();return T_NUMERIC_LITERAL;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 119 "js_lex.l"
{yyval.s = insert(js_lextext);return T_IDENTIFIER;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 120 "js_lex.l"
{}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 122 "js_lex.l"
ECHO;
	YY_BREAK
#line 1500 "lex.js_lex.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed js_lexin at a new source and called
			 * js_lexlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = js_lexin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( js_lexwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * js_lextext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of js_lexlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					js_lexrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			js_lexrestart(js_lexin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) js_lexrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 226 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 226 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 225);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up js_lextext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					js_lexrestart(js_lexin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( js_lexwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve js_lextext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void js_lexrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        js_lexensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            js_lex_create_buffer(js_lexin,YY_BUF_SIZE );
	}

	js_lex_init_buffer(YY_CURRENT_BUFFER,input_file );
	js_lex_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void js_lex_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		js_lexpop_buffer_state();
	 *		js_lexpush_buffer_state(new_buffer);
     */
	js_lexensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	js_lex_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (js_lexwrap()) processing, but the only time this flag
	 * is looked at is after js_lexwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void js_lex_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	js_lexin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE js_lex_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) js_lexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in js_lex_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) js_lexalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in js_lex_create_buffer()" );

	b->yy_is_our_buffer = 1;

	js_lex_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with js_lex_create_buffer()
 * 
 */
    void js_lex_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		js_lexfree((void *) b->yy_ch_buf  );

	js_lexfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a js_lexrestart() or at EOF.
 */
    static void js_lex_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	js_lex_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then js_lex_init_buffer was _probably_
     * called from js_lexrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void js_lex_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		js_lex_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void js_lexpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	js_lexensure_buffer_stack();

	/* This block is copied from js_lex_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from js_lex_switch_to_buffer. */
	js_lex_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void js_lexpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	js_lex_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		js_lex_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void js_lexensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)js_lexalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in js_lexensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)js_lexrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in js_lexensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE js_lex_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) js_lexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in js_lex_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	js_lex_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to js_lexlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       js_lex_scan_bytes() instead.
 */
YY_BUFFER_STATE js_lex_scan_string (yyconst char * yystr )
{
    
	return js_lex_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to js_lexlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE js_lex_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) js_lexalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in js_lex_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = js_lex_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in js_lex_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up js_lextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		js_lextext[js_lexleng] = (yy_hold_char); \
		(yy_c_buf_p) = js_lextext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		js_lexleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int js_lexget_lineno  (void)
{
        
    return js_lexlineno;
}

/** Get the input stream.
 * 
 */
FILE *js_lexget_in  (void)
{
        return js_lexin;
}

/** Get the output stream.
 * 
 */
FILE *js_lexget_out  (void)
{
        return js_lexout;
}

/** Get the length of the current token.
 * 
 */
int js_lexget_leng  (void)
{
        return js_lexleng;
}

/** Get the current token.
 * 
 */

char *js_lexget_text  (void)
{
        return js_lextext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void js_lexset_lineno (int  line_number )
{
    
    js_lexlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see js_lex_switch_to_buffer
 */
void js_lexset_in (FILE *  in_str )
{
        js_lexin = in_str ;
}

void js_lexset_out (FILE *  out_str )
{
        js_lexout = out_str ;
}

int js_lexget_debug  (void)
{
        return js_lex_flex_debug;
}

void js_lexset_debug (int  bdebug )
{
        js_lex_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from js_lexlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    js_lexin = stdin;
    js_lexout = stdout;
#else
    js_lexin = (FILE *) 0;
    js_lexout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * js_lexlex_init()
     */
    return 0;
}

/* js_lexlex_destroy is for both reentrant and non-reentrant scanners. */
int js_lexlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		js_lex_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		js_lexpop_buffer_state();
	}

	/* Destroy the stack itself. */
	js_lexfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * js_lexlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *js_lexalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *js_lexrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void js_lexfree (void * ptr )
{
	free( (char *) ptr );	/* see js_lexrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 122 "js_lex.l"



